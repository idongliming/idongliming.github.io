<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>idongliming&#39;s Dirty life</title>
  
  <subtitle>这只是我的笔记和吐槽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://idongliming.github.io/"/>
  <updated>2020-07-24T02:41:23.000Z</updated>
  <id>https://idongliming.github.io/</id>
  
  <author>
    <name>idongliming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git-for-windows美化</title>
    <link href="https://idongliming.github.io/post/git-for-windows-meihua.html"/>
    <id>https://idongliming.github.io/post/git-for-windows-meihua.html</id>
    <published>2020-07-24T02:41:23.000Z</published>
    <updated>2020-07-24T02:41:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>默认的界面太丑了</p><a id="more"></a><hr><p>修改配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/profile.d/git-prompt.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token function">test</span> -f /etc/profile.d/git-sdk.sh<span class="token keyword">then</span>    TITLEPREFIX<span class="token operator">=</span>SDK-$<span class="token punctuation">{</span>MSYSTEM<span class="token comment" spellcheck="true">#MINGW}</span><span class="token keyword">else</span>    TITLEPREFIX<span class="token operator">=</span><span class="token variable">$MSYSTEM</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token function">test</span> -f ~/.config/git/git-prompt.sh<span class="token keyword">then</span>    <span class="token keyword">.</span> ~/.config/git/git-prompt.sh<span class="token keyword">else</span>    PS1<span class="token operator">=</span><span class="token string">'\[\033]0;Bash\007\]'</span>      <span class="token comment" spellcheck="true"># 窗口标题</span>    PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'\n'</span>                 <span class="token comment" spellcheck="true"># 换行</span>    PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'\[\033[32;1m\]'</span>     <span class="token comment" spellcheck="true"># 高亮绿色</span>    PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'➜  '</span>               <span class="token comment" spellcheck="true"># unicode 字符，右箭头</span>    PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'\[\033[33;1m\]'</span>     <span class="token comment" spellcheck="true"># 高亮黄色</span>    PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'\W'</span>                 <span class="token comment" spellcheck="true"># 当前目录</span>    <span class="token keyword">if</span> <span class="token function">test</span> -z <span class="token string">"<span class="token variable">$WINELOADERNOEXEC</span>"</span>    <span class="token keyword">then</span>        GIT_EXEC_PATH<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> --exec-path 2<span class="token operator">></span>/dev/null<span class="token variable">)</span></span>"</span>        COMPLETION_PATH<span class="token operator">=</span><span class="token string">"<span class="token variable">${GIT_EXEC_PATH%/libexec/git-core}</span>"</span>        COMPLETION_PATH<span class="token operator">=</span><span class="token string">"<span class="token variable">${COMPLETION_PATH%/lib/git-core}</span>"</span>        COMPLETION_PATH<span class="token operator">=</span><span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/share/git/completion"</span>        <span class="token keyword">if</span> <span class="token function">test</span> -f <span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/git-prompt.sh"</span>        <span class="token keyword">then</span>            <span class="token keyword">.</span> <span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/git-completion.bash"</span>            <span class="token keyword">.</span> <span class="token string">"<span class="token variable">$COMPLETION_PATH</span>/git-prompt.sh"</span>            PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'\[\033[31m\]'</span>   <span class="token comment" spellcheck="true"># 红色</span>            PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'<span class="token variable"><span class="token variable">`</span>__git_ps1<span class="token variable">`</span></span>'</span>    <span class="token comment" spellcheck="true"># git 插件</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span>    PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span class="token string">'\[\033[36m\] '</span>      <span class="token comment" spellcheck="true"># 青色</span><span class="token keyword">fi</span>MSYS2_PS1<span class="token operator">=</span><span class="token string">"<span class="token variable">$PS1</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- Q.E.D. -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认的界面太丑了&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="https://idongliming.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>npm &amp; yarn</title>
    <link href="https://idongliming.github.io/post/npm-yarn.html"/>
    <id>https://idongliming.github.io/post/npm-yarn.html</id>
    <published>2020-07-23T03:35:00.000Z</published>
    <updated>2020-07-23T03:35:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="前端" scheme="https://idongliming.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="npm" scheme="https://idongliming.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>网络原理复习笔记</title>
    <link href="https://idongliming.github.io/post/wangluoyuanli.html"/>
    <id>https://idongliming.github.io/post/wangluoyuanli.html</id>
    <published>2020-06-14T08:51:48.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>互联网的核心部分起特殊作用的是路由器. 路由器实现分组交换的关键构件, 其任务是转发收到的分组</p><ul><li><p>电路交换的三个步骤:</p><ul><li>建立连接</li><li>通话</li><li>释放连接;在通话的全部时间内, 通话的两个用户始终占用全部端到端的通信资源</li></ul></li><li><p>分组交换技术的主要特点:</p><ul><li>采用存储转发技术, 我们要发送的整块数据称为一个报文, 发送报文时将报文划分成登场数据段, 加上必要的首部就成了一个分组/包</li><li>位于网络边缘的主机和位于网络核心部分的路由器都是计算机, 主机为用户进行信息处理, 路由器用来转发分组</li><li>路由器收到分组, 暂时存储, 检查其首部, 查找转发表, 检查首部目的地址, 从合适的接口转发出去, 将分组交给下一个路由器</li></ul></li><li><p>分组交换的主要有点</p><ul><li>高效, 在分组传输中动态分配传输贷款, 对通信链路逐段占用</li><li>灵活, 为每一个分组独立的选择最合适的转发路由</li><li>迅速, 以分组为单位, 可以不先建立连接就能向其他主机发送分组</li><li>可靠, 保证可靠性的网络协议, 分布式多路由的分组交换网</li><li>几种不同的计算机网络</li></ul></li><li><p>作用范围:</p><ul><li><p>广域网(WAN)</p></li><li><p>城域网(MAN), 覆盖范围5-50km, 采用以太网技术</p></li><li><p>局域网(LAN), 范围1km</p></li><li><p>个人区域网(PAN)和无线个人区域网(WPAN)</p></li></ul></li><li><p>按照使用中分类</p><ul><li><p>公用网</p></li><li><p>专用网</p></li></ul></li><li><p>计算机网络的性能</p></li><li><p>计算机网络的性能指标</p></li></ul><p>速率: 指数据的传送速率, 也称为数据率或比特率</p><p>带宽: 在频域中是信号具有的频带宽度, 在时域中网络通道内传送数据的能力</p><p>吞吐量: 单位时间内通过某个网络的实际数据量</p><p>时延是指数据(一个报文或者分组)从网络(链路)的一端传送带另一端所需的时间</p><p>发送时延: 是主机或路由器发送数据帧所需要的时间, 也叫传输时延, 发送时延=(数据帧长度)/(发送速率)</p><p>传播时延: 是电磁波在信道中传播一定的距离需要花费的时间, 传播时延=信道长度/电磁波在信道上的传播速率</p><p>电磁波在自由空间的传播速率是光速310^5Km/s, 在铜线电缆中的传播速率为2.310^5Km/s, 在光纤中的传播速率为2*10^5Km/s</p><p>发送时延是只在网络适配器内部转发分组的时延, 传播时延在链路中的发送时延</p><p>处理时延: 是主机或者路由器收到分组是花费一定的时间进行处理(分析首部等)</p><p>排队时延: 是分组经过网络传输是经过路由器后要先在输入队列中排队等待处理的时延</p><p>时延带宽积: 是传播时延和带宽相乘, 时延带宽积是指链路的容纳量</p><p>往返时间RTT, 发送时间=数据长度/发送速率, 有效数据率=数据长度/(发送时间+RTT)</p><p>利用率有信道利用率和网络利用率, 网络当前时延=网络空闲时的时延/(1 - 利用率)</p><p>计算机网络</p><p>协议与划分层次</p><p>网络协议是为进行网络中的数据交换而建立规则,标准或约定</p><p>语法, 即数据与控制信息的结构或格式<br>语义, 即需要发出何种控制信息, 完成何种动作以及做出何种响应<br>同步, 即事件实现顺序的详细说明<br>网络层次</p><p>各层是独立的. 不需要知道他的下一层是如何实现的, 只需要通过层间的接口提供服务</p><p>灵活性好, 当某一层发生变化时, 只要层间接口关系不便, 各层均不受影响</p><p>结构上可分割开, 各层采用最适合的技术来实现</p><p>易于实现和维护, 能够实现和调试一个庞大而又复杂的系统变得易于处理</p><p>能促进标准化工作</p><p>通常各层需要完成的功能</p><p>差错控制<br>流量控制<br>分段和重装<br>复用和分用<br>连接建立和释放<br>具有五层协议的体系结构</p><p>OSI参考模型具有七层体系结构, 物理层, 数据链路层, 数据链路层, 网路层, 传输层, 会话层, 表示层, 应用层OSI参考模型</p><p>TCP/IP参考模型, 链路层, 网络层, 传输层, 应用层</p><p>五层参考模型</p><p>应用层, 通过应用进程间的交互来完成特定网络应用, 交互数据单元称为报文</p><p>运输层, 负责向两台主机中的进程之间的通信提供数据传输服务, 并不指定某个特定层网络应用, 多种应用都可以使用同一个运输层服务, 因此有复用和分用的功能, 复用是指多个应用同时使用运输层服务, 分用是运输层收到的信息分别交付到应用层中的相应进程</p><p>transmission Control protocol协议—-提供面向连接的, 可靠的数据传输服务, 数据传输单位是报文段<br>User Datagram protocol协议—-提供无连接的,尽力的数据传输服务, 数据传输单位是用户数据报<br>网络层, 为分组交换网上的不同主机提供通信服务, 将运输层产生的报文段或用户数据报封装成分组或包进行传送, 分组也称IP数据报, 另一个任务是将源主机运输层传下来的分组通过网络中的路由器找到目的主机</p><p>数据链路层, 数据链路层将网络层交下来的网络IP数据报组装成帧, 在相邻结点链路上传送帧, 每一帧包括数据和必要的控制信息(如同步信息等)</p><p>物理层, 光纤等</p><p>人们经常提到的TCP/IP并不一定是指这两个具体协议, 往往是整个TCP/IP协议族</p><p>实体, 协议, 服务和服务访问点</p><p>协议是控制两个对等实体(或多个)进行通信的规则的集合</p><p>在协议的控制下, 两个对等实体间的通信是的本层能够向上一层提供服务, 要实现本层协议还需要实现下面一层所提供的服务</p><p>协议是水平的, 服务是垂直的, 上层使用下层提供的服务必须通过与下一层交换命令(服务原语)</p><p>TCP/IP协议可以为各式各样的应用提供服务, 同时TCP/IP协议也允许IP协议在各式各样的网络构成的互联网上运行</p><p>物理层<br>物理层在计算机内部多采用并行传输方式, 但数据在通信线路上采用串行传输</p><p>一个数据通信系统可以划分为源系统, 传输系统, 目的系统</p><p>源系统<br>源点, 信号源<br>发送器, 通常源点生成的数字比特流要通过发送器编码后才能在传输系统进行传输, 典型的发送器是调制器, 很多计算机使用内置的调制解调器<br>接收器, 解调器<br>终点, 屏幕等<br>信号<br>模拟信号, 或连续信号, 调制解调器到电话局之间的用户线<br>数字信号, 或离散信号, 计算机到调制解调器<br>信道基本概念<br>单向通信, 单工通信<br>双向交替通信, 半双工通信<br>双向同时通信, 全双工通信<br>来自信源的信号称为基带信号, 计算机输出的代表各种文字或图像文件的数据信号都属于基带信号, 基带信号中往往包含较多的低频成分, 甚至有直流成分, 因此需要对基带信号进行调制解调</p><p>调制可分为两类, 一种是仅对基带信号的波形进行变换, 使他能与信道特性相适应, 变换后的信号还是基带信号, 这类调制称为基带调制, 另一类调制需要使用载波进行调制, 把基带信号的频率范围搬移到较高的频段, bin转换为模拟信号, 进过载波的信号称为带通信号调制</p><p>常用编码方式</p><p>不归零值, 正电平为1, 负电平为0<br>归零制, 正脉冲为代表1, 负脉冲为0<br>曼彻斯特编码, 周期内向上跳的代表0, 向下跳代表1<br>差分曼彻斯特编码, 在每一位中心处始终有跳变, 位开始边界有跳变代表0，而位开始边界没有跳变代表1。<br>基本的带通调制方法</p><p>调幅(AM) 载波的振幅随基带数字信号而变化<br>调频(FM) 载波的频率随基带数字信号而变化<br>调相(PM) 载波的初始相位随基带数字信号而变化<br>信噪比 = 10 log 10(s/n)</p><p>香农公式: 信道的极限信息传输速率是 C = W log2(1 + s/N)(bit/s), w是信道的带宽(以hz为单位), S为信道内所传信号的平均功率, N为信道内部的高斯噪声功率</p><p>信道的带宽或信道中的信噪比越大, 信息的极限传输速率就越高, 用编码的方法让每一个码元携带更多比特的信息量</p><p>物理层下面的传输媒体<br>导引型媒体<br>双绞线<br>同轴电缆<br>光缆, 传输损耗小, 中继距离长, 抗干扰强, 保密性好, 体积轻<br>信道复用技术<br>频分复用, 时分复用和统计时分复用<br>频分复用是所有用户在同样的时间占用不同的带宽(频率带宽)资源<br>时分复用的所有用户在不同的时间占用相同的频带宽度, 时分复用则有利于数字信号的传输<br>波分复用是光的频分复用<br>码分复用: 每一个用户可以在同样的时间使用同样的频带进行通信, 由于各用户使用不同码型, 因此各用户之间不会造成干扰, 其频谱类似与白噪声, 不易被发现<br>宽带接入技术<br>ADSL技术, 非对称数字用户线, 是用数字技术对现有的模拟电话用户线进行改造, 是他能承载宽带数字业务<br>光纤同轴混合网(HFC网)<br>FTTx技术, 光纤到户技术<br>数据链路层<br>数据链路层属于计算机网络的低层</p><p>点对点通道, 这种通道使用一对一的点对点通信方式<br>广播信道, 这种信道使用一对多的广播通信方式<br>使用点对点信道的数据链路层<br>数据链路和帧<br>链路就是一个结点到相邻结点的一段物理线路(有线或无线)<br>数据链路是另一个概念, 在一条线路上传送数据时, 除了一条必须的物理链路外, 还需要包括必要的通信协议来控制这些数据的传输才构成了数据链路, 现在最常用的方法是使用网络适配器来实现这些协议, 一般的适配器都包括了数据链路层和物理层这两层功能<br>帧<br>数据链路层将网络层交下来的数据构成帧发送到链路上, 以及把收到的帧中的数据取出在上交到网络层, 网络层协议数据单元是IP数据报<br>三个基本问题<br>封装成帧是在一段数据的前后加上首部和尾部, 首部和尾部的一个重要作用是帧定界, 为了提高数据传输速率, 帧的数据部分长度应尽可能的大于首部和尾部的长度, 每一种链路层协议所能传送的帧的数据部分长度上线为最大传送单元MTU<br>透明传输, 由于帧的开始就结束的标记使用专门的控制字符, 因此所传输任何8比特组合总一定不允许和用作帧定界的控制字符比特编码相同, 在数据链路层透明传输表示无论什么样的比特组合的数据都能够原样无差错的通过数据链路层, 因此, 对于所传送的数据来说, 这些数据就看不见数据链路层有什么妨碍数据传输的东西(转义字符)<br>差错检测, 传输错误的比特总数站所传输比特总数的比率称为误码率, 信噪比越高误码率越小(循环冗余校验)<br>循环冗余检验, 帧检验序列FCS是帧检验序列, 一般使用冗余检验法是模二运算, 异或运算, 发送的FCS是M + FCS(余数)<br>如果帧无差错, 将每一帧都除以除数, 余数为0<br>凡是被接收端数据链路层接受的帧均无差错<br>数据链路层没有提供可靠传输服务<br>在CRC上加上了帧编号, 确认和重传机制, 对于质量较好的有线传输线路, 不适用确认和重传机制<br>点对点协议PPP<br>PPP协议满足的需求</p><p>简单, 只进行封装校验<br>封装成帧<br>透明性<br>多种网络协议<br>多种类型链路<br>差错检测<br>检测连接状态<br>最大传送单元<br>网络层地址协商<br>数据压缩协商<br>只支持点对点链路通信, 只支持全双工链路</p><p>协议的组成</p><p>将IP数据报封装到串行链路的方法, PPP既支持异步链路(无奇偶校验的8比特数据), 也支持面向比特的同步链路<br>一个用来建立配置和测试数据链路连接的链路控制协议LCP<br>一套网络控制协议NCP, 其中每一个协议支持不同的网络层协议<br>PPP协议帧格式</p><p>PPP协议帧格式<br>PPP协议帧格式<br>首部的第一个字段和尾部第二字段都是标志字段, 字段A和C没有携带帧信息,第四个字段是协议字段, 当协议字段是0x0021时, ppp帧信息字段是IP数据报, 若为0xC021是ppp链路协议的LCP数据, 0x8021是控制数据<br>字节填充<br>将信息字段中的每一个0x7E 字节转变为2字节序列(0x7D, 0x5E)<br>若信息中出现了一个0x7D字节, 转变为(0x7D,0x5D)<br>若信息字段中出现小于0x20字符, 则在字符前加入一个0x7D字节, 同时改变编码<br>零比特填充, 在使用SONET/SDH链路使用同步传输时, 只要发现连续5个一,则立即加入一个0<br>使用广播信道的数据链路层<br>局域网的数据链路层</p><p>网络为一个单位所有, 且地理范围和站点数目均有限</p><p>具有广播功能<br>便于系统的扩展和逐渐演变, 各设备的位置可灵活调整和改变<br>提高了系统的可靠性, 可用性, 生存性<br>分类,星形网, 总线网, 环形网, 总线网中以太网最为出名</p><p>以太网标准<br>数据链路层被拆分为两层, 逻辑链路控制层LLC, 媒体接入控制MAC</p><p>适配器作用: 进行数据串行传输和并行传输的转换</p><p>CSMA/CD, 载波监听多点接入/碰撞检测</p><p>采用无连接的方式, 尽最大努力交付, 重传也当做新的数据帧<br>曼彻斯特编码<br>载波监听是检测信道, 每个站都必须不停检测信道<br>碰撞检测也就是边发边听<br>一个站不可能同时进行发送和接收<br>争用期是值以太网在发送数据帧后至多经过两个时间, 又称碰撞窗口, 经过争用期还没有检测到碰撞才能肯定这次发送没有发生碰撞<br>以太网使用截断二进制指数退避算法, 发生碰撞后不是等待信道空闲后立即重发, 而是推迟一个最忌时间, 若连续多次发生冲突, 使用此算法可以使重传需要推迟的平均时间随重传次数二增大(动态退避)<br>使用集线器的星形拓扑</p><p>使用集线器的以太网逻辑上仍是总线网, 使用的还是CSMA/CD协议<br>一个集线器有许多接口<br>集线器工作在物理层, 每个接口仅简单转发比特不进行检测<br>以太网的MAC层</p><p>硬件地址又称MAC地址, 固化在适配器ROM中的地址</p><p>mac帧由五个字段组成, 前两段分别为6字节长的目的地址和原地址地址, 第三个字段是类型字段</p><p>扩展以太网<br>最初是网桥, 对收到的帧进行转发和过滤, 交换式集线器称为以太网交换机</p><p>实质是多接口网桥, 每个接口都直接与单台主机或另一个以太网交换机相连, 还具有并行性, 链接多个主机同时通信<br>相互通信的主机都是独占传输媒体, 无碰撞的传输数据<br>虚拟局域网<br>100BASE-T 以太网, 使用IEEE802.3CSMA/CD协议, IEE802.3u<br>吉比特以太网IEE802.3z<br>10吉比特以太网和更快地以太网IEE802.3an</p><p>网络层<br>##　网络层提供的两种服务<br>网络层向上只提供简单灵活的，无连接的尽最大努力交付的数据报服务</p><p>虚电路服务和数据报服务的对比<br>对比的方面 | 虚电路服务 | 数据报服务<br>— | — | —-<br>思路|可靠通信应当由网络来保证|可靠通信应该由用户主机来保证<br>连接的建立 | 必须有 | 不需要<br>终点的地址 | 仅在连接建立阶段使用, 每个分组使用短的虚电路好 | 每个端点都有终点的完整地址<br>分组的转发 | 属于同一虚电路的分组按照同意路由转发 | 每个分组独立选择路由进行转发<br>结点故障 | 均失败 | 丢失分组<br>分组顺序 | 按序到达 | 无序<br>差错控制流量控制 | 由网络或者用户主机负责 | 由用户主机负责</p><p>网际协议IP<br>与IP协议配套的协议还有三个协议</p><p>地址解析协议ARP, 反向的RARP逆地址解析协议<br>网际控制报文协议ICMP<br>网际组管理协议IGMP<br>虚电路互连网络<br>将网络互连起来的设备要使用一些中间设备</p><p>物理层使用的中间设备叫做转发器<br>数据链路层使用的中间设备叫做网桥<br>网络层使用的中间设备叫做路由器<br>在网络层以上使用的中间设备叫做网关, 用网关连接两个不兼容的系统需要在高层进行协议的转换<br>当中间设备是装阿奇或网桥, 这仅仅是扩大一个网络, 这仍然是一个网络, 并不是网络互连</p><p>互联网可以由多种易购网络互连组成</p><p>分类ip地址<br>IP地址由两个长度的字段组成, 第一个字段是网络号, 标志主机(或路由器)所连接到的网络, 一个网络号在整个互联网范围内是必须是唯一的, 第二个字段是主机号, 标志主机</p><p>A类B类C类地址的网络号字段分别为一个, 两个, 三个字节长<br>D类地址(前四位1110)用于多播<br>E类地址(前四位1111)保留以后用</p><p>A类地址网络号占一个字节,只有7位可供使用, 可使用的网络好为(2^7 - 2), 一个是全0地址, 代表网络本身. 一个是127保留作为本地软件环回测试主机间进程使用</p><p>A类地址主机号占三个字节, 每一个A类网络最大主机数为(2^24 -2): 全0的表示表示网络地址, 全1的表示网络上的所有主机</p><p>B类地址可指派的网络数为2^14 -1个, 最大主机数为2^16 - 2个</p><p>ip地址与硬件地址<br>物理地址是数据链路层和物理层使用的地址, IP地址是网络层和以上各层使用的地址, 是一种逻辑地址</p><p>IP地址放在IP数据报的首部, 硬件地址放在mac帧的首部, 在网络层和网络层以上使用的是ip地址, 数据链路层及一下使用的是链路地址</p><p>在ip抽象的互联网上只能看见IP数据报<br>路由器只根据目的站的ip地址的网络号进行路由选择<br>在局域网的链路层, 只能看见mac帧<br>隐藏细节<br>地址解析协议ARP<br>ARP是在主机ARP高速缓存中存放一个IP地址到硬件地址的映射表, 并且实时更新</p><p>广播请求分组</p><p>ip数据报格式<br>固定首部</p><p>版本号4位, 协议版本ipv?</p><p>首部长度4位, 表示最大十进制数值为15字节, 最常用的首部长度为20字节(即0101)</p><p>区分服务8位, 一般不使用</p><p>总长度值首部和数据数据之和的长度, 单位为字节, 总长度为16位, 数据报最大长度为2^16 - 1字节</p><p>IP协议规定, 所有的主机路由必须能够接受长度不超过576字节的数据报, 超过时需要分片</p><p>标识16位, 作为计数器, 产生一个数据报就加1, ip作为无连接服务不存在按序接收,用来重组数据报, 在分片时这个标识字段复制给所有的数据报标识字段</p><p>标志3位, 只有两位有意义</p><p>最低位字段为MF,MF=1 标识后面还有分片的数据报,MF=0 标识是若干数据报片中的最后一个<br>中间一位为DF, 标识不能分片, 当DF=0才允许分片<br>片偏移13位, 分片后在原分组的相对位置</p><p>生存时间8位, 防止无法转发的, 每经过一个路由器就把TTL减去数据报在路由器消耗的时间, 小于一就减一,现在是跳数限制</p><p>协议8位,例如ICMP</p><p>首部校验和16位, 只校验数据报的首部, 先把IP数据报首部划分为16字节的序列, 校验和字段设为0, 算数运算想加所有的, 写入到检验和字段, 接收方收到后把所有的16字节使用运算相加后取反码, 未发生变化结果为0</p><p>源地址</p><p>目的地址</p><p>划分子网和构造超网<br>划分子网</p><p>ip地址空间利用率不合理<br>给每一个物理网络分配一个网络号会使路由表变的太大, 互联网中的网络越多, 路由器中的路由表项目数越多, 也会导致路由器成本变高<br>两级IP地址不灵活<br>划分子网的思路与</p><p>一个拥有许多物理网络的单位, 可将所属的网络划分成若干子网, 划分子网是单位内部的, 单位以外的看不见, 只表现一个物理网络<br>从主机网络号借用若干位做子网号<br>子网掩码, 用来确定网络划分</p><p>把三级ip地址和收到的数据报目的地址按位与就能得出子网的网络地址<br>使用子网时分组的转发</p><p>路由表必须包含: 目的网络地址, 子网掩码, 下一跳地址<br>相与之后的结果如果不在路由表, 继续将结果再次相与<br>无分类编址CIDR(构造超网)</p><p>消除了传统A类等划分子网的概念<br>将32位IP地址分为前后两部分, 前面部分是网络前缀,后面部分指主机<br>使用斜线记法,IP地址后面加上斜线,然后协商网络前缀所占的位数<br>CIDR使用32为的地址掩码,也可称为子网掩码,斜线表示1的个数<br>最长前缀匹配<br>网际控制报文协议<br>允许主机或路由器报告差错</p><p>种类<br>ICMP差错报告报文<br>ICMP询问报文<br>统一三个字段: 类型, 代码和校验和</p><p>ICMP报文种类    类型值    ICMP报文类型<br>差错报告报文    3    终点不可达<br>–    11    时间超过<br>–    12    参数问题<br>–    5    改变路由<br>询问报文    8/0    回送请求或应答<br>–    13/14    时间戳请求或回答<br>应用在ping/tracerout</p><p>互联网的路由选择协议<br>理想的路由算法</p><p>算法完整<br>计算简单<br>适应变化<br>具有稳定性<br>公平的<br>最佳的<br>分层次路由选择协议</p><p>自治系统<br>内部网关协议IGP, 处在相同同的自治系统中, 如RIP和OSPF协议<br>外部网关EGP协议<br>内部网关RIP是一种分布式的基于距离向量的路由网关协议, 距离也称跳数, RIP允许一条路劲最多15个路由器, 只适用于小型互联网</p><p>仅仅和邻路由器交换信息<br>交换的信息是路由表<br>按固定时间间隔交换信息<br>RIP协议首部4字节, 每个路由信息20字节, 最多包含25个路由</p><p>内部网关协议OSPF</p><p>开放最短路径优先, 是分布式的链路状态协议</p><p>洪泛法向本自治系统所有路由器发送信息<br>发送的是与本路由器相邻的所有路由器链路状态<br>只有当链路状态发生变化后才向路由器发送信息<br>外部网关协议BGP</p><p>互联网规模太大, 自治系统之间路由选择困难<br>自治系统之间的路由选择必须考虑油管策略<br>ipv6<br>IPv6基本首部</p><p>更大的地址空间<br>扩展的地址层次结构<br>灵活的首部格式<br>允许协议的继续扩充<br>支持资源的预分配<br>首部8字节对其<br>IPv6的改变</p><p>取消了首部长度字段, 固定40字节<br>取消服务类型字段, 优先级和流标号实现了功能<br>取消了总长度字段改为有效载荷长度字段<br>取消了标识,标志, 片偏移字段, 包含在分片扩展首部<br>取消了协议字段, 改用下一个首部字段<br>取消了检验和字段<br>取消了选项字段, 用扩展来实现功能<br>首部格式</p><p>版本4位<br>通信量8位,区分数据报类别或优先级<br>流标号20位,流是互联网上从特定源点到特定终点(单播或多播)的一些了数据报(视频等), 流经过的路径上都保证指明服务质量<br>有效载荷长度16位, 除基本首部以外的字节数, 最大值为64kB<br>下一个首部8位,相当于ipv4协议字段或可选字段<br>跳数限制,TTL<br>源地址128位<br>目的地址128位<br>ipv6的地址</p><p>单播:点对点通信<br>多播:一点对多点的通信<br>任播:终点是一组计算机<br>IPv4到IPv6的转变</p><p>双协议栈值一部分主机装有双协议站,v4和v6,双向通信,若DNS返回的是ipv4的地址,双协议栈主机就是用v4, 在v4向v6转发的时候转换后再发, 但是有些数据没法恢复, 例如流标号<br>隧道技术, 在ipv6进入v4网络时, 将ipv6数据报封装为v4数据部分,整个v6数据报变成了v4数据报数据部分<br>ip多播<br>vpn和网络地址转换NAT<br>vpn在对路由器中的所有路由器, 对目的地址是专用地址的数据报一律不进行转发,也称专用互联网</p><p>运输层<br>运输层协议概述<br>进程之间的通信<br>运输层向它上面的应用层提供通信服务, 是面向通信部分的最高层, 也是用户功能的最低层</p><p>运输层为相互通信的应用进程提供了端到端的逻辑通信</p><p>IP层真正通信的实体是主机中的进程</p><p>运输层的两个主要协议<br>用户数据报协议UDP<br>传输控制协议TCP<br>运输层端口<br>运输层所有的应用进程都可以通过运输层传送到IP层,这就是复用, 运输层从IP层收到发送给各应用进程的数据够分别交付给应用进程, 这就是分用</p><p>通信的终点虽然是应用进程, 单报文交付的是目的主机端口</p><p>晕乎数据协议UDP<br>udp是无连接的<br>尽最大努力交付<br>UDP是面向报文的, 一次性交付一个完整的报文<br>没有拥塞控制<br>UDP支持一对一, 一对多, 多对多的交互通信<br>UDP首部开销小<br>UDP首部格式, 首部字段只有8个字节<br>源端口, 不需要可全为0<br>目的端口<br>长度, 最小值为8<br>检验和, 判断是够有误<br>计算校验和时, 需要在头部加上一个伪首部(源IP地址, 目的IP地址, 0, 17, UDP长度), 仅用作计算检验和</p><p>传输控制TCP<br>面向连接<br>每条连接有两个TCP<br>TCP提供全双工通信<br>面向字节流, 指流入到进程或从进程流出的字节序列<br>tcp的链接<br>TCP连接的端点是套接字,套接字是IP拼接端口</p><p>可靠传输的工作原理<br>TCP下面的网络提供的都是不可靠的传输, 不可靠的传输信道能够实现可靠传输</p><p>停止等待协议<br>停等就是每发送一个分组就停止发送等到确认</p><p>无差错情况<br>出现差错后重传, 设置重传等待时间<br>确认丢失和确认迟到<br>信道利用率= 发送分组时间/(发送分组时间 + RTT + 确认分组所需时间)</p><p>为了提高传输速率, 使用流水线传输</p><p>连续ARQ协议<br>滑动窗口协议, 每收到一个确认, 发送窗口就向前滑动一个分组位置,接受方采用累计确认的方式</p><p>TCP报文段首部格式<br>源端口和目的端口, 各占2个字节<br>序号,占四个字节, 报文段序号<br>确认号, 占四字节, 期望收到对方下一个报文段的第一个数据字节的序号, 确认号表示序号前的所有数据都已正确收到<br>数据偏移, 占4位, 指出TCP报文段的数据起始处距离TCP报文段的起始出有多远<br>保留文6位<br>控制位6位, URG=1紧急字段<br>ACK=1是确认号字段才有效<br>推送PSH=1是立即创建一个报文段发送过去, 接收方收到后立即交付<br>复位RST=1表示需要释放链接,然后重新建立链接<br>同步SYN=1而ACK=0是表示这是一个请求连接报文段, 若同意连接, 响应报文段syn=1,ACK=1<br>终止FIN用来释放连接<br>窗口站两字节<br>检验和占两字节, 同UDP一样都要加上伪首部, 第四个字段应改为6<br>紧急指针,2字节在URG=1才有效,指出本报文段中的紧急数据字节数<br>选项, 长度可变, 最长20字节<br>TCP可靠传输的实现<br>以字节为单位的滑动窗口<br>超时重传时间的选择<br>选择确认SACK<br>TCP流量控制<br>流量控制是让发送方的发送速率不要太快, 要让接收方来得及接收,设置持续计时器防止丢失后形成死锁</p><p>TCP拥塞控制<br>拥塞控制是防止过多的数据注入到网络中, 这样可以使用网络中的路由器或链路不会过载</p><p>流量控制是点对点通信量的控制, 是一个端到端的问题, 抑制发送方的数据发送速率</p><p>拥塞控制方法<br>慢开始, 拥塞避免, 快重传, 快恢复</p><p>慢开始和拥塞避免<br>基于窗口的拥塞控制, 发送方维持一个拥塞窗口的状态变量, 窗口的大小取决于网络的拥塞程度, 发送方让自己的发送窗口等于拥塞窗口</p><p>判断出现网络拥塞的依据是出现了超时</p><p>慢开始是由小到大逐渐增大拥塞窗口数值,每经过一个传输轮次就加倍</p><p>防止拥塞窗口增长过大引起拥塞,设置慢开始门限</p><p>拥塞避免算法就是让拥塞串口慢慢增大, 每经过一个往返时间RTT就加1</p><p>快重传是不等待自己发送数据是才确认,而是立即发送确认</p><p>TCP运输链接管理<br>三次握手<br>四次挥手</p><p>应用层<br>不同的网络应用的应用进程之间, 需要不同通信规则</p><p>域名系统DNS<br>域名到IP的解析是有分布在互联网的域名服务器程序完成</p><p>域名不区分大小写, 完整域名不超过255个字符</p><p>域名服务器<br>一个服务器所负责管辖的范围叫区, 一个区的所有节点必须是能够连通的, DNS服务器的范围不是以域作为单位, 而是区作为单位, 区小于等于域</p><p>根域名服务器是最高层次的域名服务器, 所有根域名服务器都知道所有的顶级域名服务器<br>顶级域名服务器, 这些域名管理所有二级域名<br>权限域名服务器, 一个区的域名服务器<br>本地域名服务器<br>主机向本地域名服务器的查询一般采用递归查询<br>本地域名服务器向根域名服务器查询使用迭代查询<br>维护有高速缓存<br>文件传送协议FTP<br>FTP客户与服务器建立两个连接, “控制连接”和”数据传送连接”</p><p>简单文件传送协议TFTP<br>每次传送512字节数据<br>数据报文按序编号,从1开始<br>支持ASCII码或二进制传送<br>可以对文件读写<br>使用简单的首部<br>远程终端协议TELNET<br>万维网WWW<br>统一资源定位符url<br>超文本传送协议HTTP<br>http1.1 使用的持续连接</p><p>代理服务器<br>请求代理服务器<br>若存在就返回<br>否则代理服务器与互联网上的源点服务器建立TCP连接,并发送http报文<br>源点服务器吧请求的对象放在http响应报文返回代理服务器<br>代理服务器收到后复制到自己本地存储器中, 在吧这个对象放在http响应报文总通过已建立的链接返回请求该对象的浏览器<br>http报文结构<br>开始行, 区分请求报文和响应报文, 在开始行的三个字段之间用空格分隔开<br>首部行, 说明浏览器服务器或报文主体的一些信息,每一行的结束位置都要有回车和换行, 整个首部结束时, 还要空一行隔开<br>实体主题<br>电子邮件<br>简单邮件传送协议SMTP, 通用互联网邮件扩充(附件),邮件读取协议pop3</p><p>连接建立250, 不可用421<br>邮件传送, 出错451, 452空间不够, 500命令无法识别<br>连接释放221<br>动态主机配置协议DHCP<br>简单网络管理协议SNMP<br>网络安全<br>被动攻击是从网络上窃听他人通信内容</p><p>主动攻击</p><p>篡改, 更改报文流<br>恶意程序<br>计算机病毒<br>计算机蠕虫<br>特洛伊木马<br>逻辑炸弹<br>后门入侵<br>流氓软件<br>拒绝服务<br>安全的计算机网络<br>保密性<br>端点鉴别<br>信息完整性<br>运行完全性<br>两类密码体制<br>对称密码密码体制,DES属于对称秘钥密码体制, 保密性取决于对秘钥的保密, 算法是公开的<br>公钥密码体制使用不同的加密秘钥和解密秘钥,基于大数分解的RSA体制<br>数字签名<br>接受者能够核实发送至对报文的签名<br>接受者确认收到的数据没有被篡改过<br>发送者不可抵赖<br>鉴别<br>报文鉴别<br>密码散列函数<br>MD5和SHA-1,SHA<br>报文鉴别码<br>运输层安全协议<br>安全套接字层SSL<br>运输层安全TLS<br>应用层安全协议PGP<br>系统安全防火墙<br>防火墙是一种访问控制技术,严格控制网络边界的分组禁止任何不必要的通信</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;互联网的核心部分起特殊作用的是路由器. 路由器实现分组交换的关键构件, 其任务是转发收到的分组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;电路交换的三
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="基础知识" scheme="https://idongliming.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>manjaro linux 笔记</title>
    <link href="https://idongliming.github.io/post/manjaro-linux-bi-ji.html"/>
    <id>https://idongliming.github.io/post/manjaro-linux-bi-ji.html</id>
    <published>2020-05-05T12:45:07.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是Manjaro"><a href="#一、什么是Manjaro" class="headerlink" title="一、什么是Manjaro?"></a>一、什么是Manjaro?</h1><p>Manjaro是一个基于Arch Linux的对用户友好的操作系统。<br>它的特点如下：</p><ul><li>滚动发行：这意味着用户能得到最新的软件，同时Manjaro比Arch Linux要旧一些，更稳定。</li><li>用户友好：虽然Manjaro基于Arch Linux，但是通过很多努力，使Manjaro比Arch Linux简单很多，比如图形界面的安装向导。如果你之前使用过Ubuntu，那么使用Manjaro完全没有问题。</li><li>稳定：它不像Arch Linux那么前卫，也不像Ubuntu LTS那么守旧。</li><li>对硬件的良好的支持：Manjaro会自行根据硬件安装驱动。</li><li>丰富的软件：丰富的Manjaro源，同时支持AUR。</li><li>丰富的帮助资料：包括Wiki和forum。</li><li>多桌面环境： bspwm, Budgie, Cinnamon, Deepin, GNOME, i3, KDE Plasma, LXDE, LXQt, MATE, Xfce</li><li>最后一点：使用量持续下载排名第一，我们要相信群众的眼光。<br>作为桌面环境，manjaro有自己的优势，但是桌面系统，linux都不太好用，即便是做开发用<h1 id="二、manjaro下载与安装"><a href="#二、manjaro下载与安装" class="headerlink" title="二、manjaro下载与安装"></a>二、manjaro下载与安装</h1>安装方式有图形安装和命令行安装，命令行安装更强大。<h2 id="2-1、图形安装-虚拟机下演示XFCE桌面环境-："><a href="#2-1、图形安装-虚拟机下演示XFCE桌面环境-：" class="headerlink" title="2.1、图形安装(虚拟机下演示XFCE桌面环境)："></a>2.1、图形安装(虚拟机下演示XFCE桌面环境)：</h2></li></ul><p>2.1.1、下载：<br><a href="https://manjaro.org/get-manjaro/" target="_blank" rel="noopener">https://manjaro.org/get-manjaro/</a><br>国外下载地址可以下载到最新版<br>国外官方bt下载：<a href="https://osdn.net/dl/manjaro/manjaro-xfce-18.0.2-stable-x86_64.iso.torrent" target="_blank" rel="noopener">https://osdn.net/dl/manjaro/manjaro-xfce-18.0.2-stable-x86_64.iso.torrent</a><br>国内清华镜像下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/manjaro-cd/</a></p><h2 id="2-1-2、安装："><a href="#2-1-2、安装：" class="headerlink" title="2.1.2、安装："></a>2.1.2、安装：</h2><p>图形化安装方式按照提示安装即可，下面介绍命令行方式</p><h2 id="2-2、命令行安装"><a href="#2-2、命令行安装" class="headerlink" title="2.2、命令行安装"></a>2.2、命令行安装</h2><h3 id="2-2-1、下载："><a href="#2-2-1、下载：" class="headerlink" title="2.2.1、下载："></a>2.2.1、下载：</h3><p>下载Manjaro-architect 版<br><a href="https://manjaro.org/get-manjaro/" target="_blank" rel="noopener">https://manjaro.org/get-manjaro/</a></p><h3 id="2-2-2、镜像写入U盘"><a href="#2-2-2、镜像写入U盘" class="headerlink" title="2.2.2、镜像写入U盘"></a>2.2.2、镜像写入U盘</h3><p>使用usb写入工具<a href="https://etcher.io/，把下载的iso镜像文件写入u盘，" target="_blank" rel="noopener">https://etcher.io/，把下载的iso镜像文件写入u盘，</a></p><ul><li>Linux / Mac OS<br>在命令行中输入<code>dd bs=4M if=/path/to/manjaro.iso of=/dev/sd[drive letter] status=progress</code>即可将其烧录至U盘中。</li><li>Windows<br>使用 Rufus 或者是 ImageWriter For Windows 进行烧录操作，切记要选择 DD 模式，否则会导致引导失败。</li></ul><h3 id="2-2-3、安装："><a href="#2-2-3、安装：" class="headerlink" title="2.2.3、安装："></a>2.2.3、安装：</h3><p>实体机设置BIOS使用，使用f12 u盘启动电脑就可以了。</p><ul><li>检查网络是否通畅：<code>ping 114.114.114.114</code></li><li>连接Wifi</li><li>查看wifi设备</li><li>nmcli 连接Wifi <code>nmcli dev wifi connect &lt;SSID name&gt; password &lt;your password&gt;</code></li><li>安装<ul><li>使用账号manjaro和密码manjaro登录<code>sudo pacman-mirrors -c China -i -m rank</code>选择最近的仓库源安装</li></ul></li><li>关闭系统 <code>shutdown -h now</code><br>然后拔掉U盘<br>启动系统后通过下面安装中文字体<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Syy<span class="token function">sudo</span> pacman -S wqy-bitmapfont wqy-microhei  wqy-zenhei wqy-microhei-lite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>参考引用：<a href="https://forum.manjaro.org/t/installation-with-manjaro-architect-iso/20429" target="_blank" rel="noopener">https://forum.manjaro.org/t/installation-with-manjaro-architect-iso/20429</a></p></blockquote></li></ul><h1 id="三、初始化配置"><a href="#三、初始化配置" class="headerlink" title="三、初始化配置"></a>三、初始化配置</h1><h2 id="3-1、配置源"><a href="#3-1、配置源" class="headerlink" title="3.1、配置源"></a>3.1、配置源</h2><p>更新就近源，使用网络安装的话，自动就帮你配置好源了。</p><ul><li>命令行：<code>sudo pacman-mirrors -c China -i  -m rank</code></li><li>图形操作：<br>添加\删除软件–》首选项–》官方软件仓库<h2 id="3-2、增加archlinuxcn源"><a href="#3-2、增加archlinuxcn源" class="headerlink" title="3.2、增加archlinuxcn源"></a>3.2、增加archlinuxcn源</h2>archlinuxcn源包含一些常用的中文软件，例如：chrome,office</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"\n[archlinuxcn]\nSigLevel = TrustAll\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/\<span class="token variable">$arch</span>\n\n[antergos]\nSigLevel = TrustAll\nServer = https://mirrors.tuna.tsinghua.edu.cn/antergos/\<span class="token variable">$repo</span>/\<span class="token variable">$arch</span>\n"</span><span class="token operator">|</span><span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/pacman.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加archlinuxcn源（参考官方建议）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"\n[archlinuxcn]\nSigLevel = Optional TrustedOnly\nInclude = /etc/pacman.d/archlinuxcn\n"</span><span class="token operator">|</span><span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/pacman.conf<span class="token keyword">echo</span> -e <span class="token string">"\nServer = https://cdn.repo.archlinuxcn.org/\<span class="token variable">$arch</span>\n"</span><span class="token operator">|</span><span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/pacman.d/archlinuxcn<span class="token function">sudo</span> pacman -Syy <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> pacman -S archlinuxcn-keyringhttps://github.com/archlinuxcn/repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3、pacman用法"><a href="#3-3、pacman用法" class="headerlink" title="3.3、pacman用法"></a>3.3、pacman用法</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S package_name                     //安装软件<span class="token function">sudo</span> pacman -R package_name                     //删除软件<span class="token function">sudo</span> pacman -Ss string1 string2 <span class="token punctuation">..</span>.                //搜索<span class="token function">sudo</span> pacman -Si vlc                                      //查看包信息<span class="token function">sudo</span> pacman -Sc                                     //清空并且下载新数据<span class="token function">sudo</span> pacman -Syy                                   //刷新缓存<span class="token function">sudo</span> pacman -Syu                                   //更新系统（升级软件包）也可以通过图形化进行操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p><h2 id="3-4、中文字体"><a href="#3-4、中文字体" class="headerlink" title="3.4、中文字体"></a>3.4、中文字体</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S wqy-bitmapfont wqy-microhei  wqy-zenhei wqy-microhei-lite更多字体选用：<span class="token function">sudo</span> pacman -S adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts noto-fonts-cjk  noto-fonts noto-fonts-emoji<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考资料：<a href="https://wiki.archlinux.org/index.php/Fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p><h2 id="3-5、输入法设置"><a href="#3-5、输入法设置" class="headerlink" title="3.5、输入法设置"></a>3.5、输入法设置</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S fcitx-im fcitx-configtool fcitx-googlepinyin fcitx-sogoupinyin<span class="token function">sudo</span> <span class="token keyword">echo</span> -e <span class="token string">"export GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=@im=fcitx"</span><span class="token operator">>></span>~/.xprofile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启生效<br>如果是mint桌面环境，还需要在任务栏添加键盘小程序才能启动中英文切换。</p><h2 id="3-8、挂载硬盘"><a href="#3-8、挂载硬盘" class="headerlink" title="3.8、挂载硬盘"></a>3.8、挂载硬盘</h2><p>假如我们需要将sdb1硬盘挂载到/data<br>df 命令查看需要挂载的磁盘名称，本例中是sdb1<br><code>$ sudo df -l</code><br>mkdir命令创建一个文件夹，即挂载点，本例中挂载到根目录的/data文件夹<br><code>$ sudo mkdir /data</code><br>将sdb1硬盘挂载到/data<br><code>$ sudo mount -w /dev/sdb1 /data</code><br>实现系统启动后自动挂载该分区<br>$ sudo vim /etc/fstab 在/etc/fstab最后一行添加以下内容：<br><code>/dev/sdb1 /data ext4 defaults 1 2</code></p><h1 id="四、manjaro应用"><a href="#四、manjaro应用" class="headerlink" title="四、manjaro应用"></a>四、manjaro应用</h1><p>proxychains-ng：命令行代理<br><code>sudo vim /etc/proxychains.conf</code><br>文件末尾添加：<br><code>socks5 127.0.0.1 1080</code><br>然后，大多数的终端软件就可以上网了，例如：<br><code>proxychains curl www.google.com</code><br><code>shadowsocks-qt5：s5代理</code></p><p>配置virtualbox<br>安装VirtualBox<br>提示：安装VirtualBox时，您需要知道正在运行的内核版本。要获取此信息，请在终端中输入命令uname -r。</p><p>要安装VirtualBox，请在终端中输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S virtualbox virtualbox-guest-iso virtualbox-ext-vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后需要选择要安装的相应VirtualBox主机模块，具体取决于当前运行的内核版本。与安装驱动程序相似，这样做可确保VirtualBox能够正常运行。例如，在运行内核3.7的情况下，将输入相应的数字以安装以下模块：</p><p>uname -r<br>你会得到类似的东西：3.7.4-1-MANJARO。这意味着内核是linux37。然后安装它</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S linux 37 -virtualbox-host-modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，就需要将VirtualBox模块添加到内核中。简单的方法是简单地重启系统。否则，要立即开始使用VirtualBox，请输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vboxreload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向下滚动到页面底部以查找Oracle VM VirtualBox扩展包部分</p><p>2.单击安装的VirtualBox版本的相应链接以下载Extension Pack</p><p>3.下载Extension Pack后，启动VirtualBox应用程序，启动需要使用sudo virtualbox</p><ol start="4"><li>VirtualBox启动后，从顶部菜单中选择File，然后选择Preferences</li></ol><p>5.选择“ 扩展”选项卡以查看该部分，然后单击位于最右侧的 名为“ 添加包”的图标</p><p>7.找到下载的Extension Pack，确保它突出显示，然后单击“ 打开”按钮开始安装过程</p><p>8.确认您要安装扩展包，然后确认您同意许可条款（至少需要向下滚动到术语底部以激活我同意按钮）</p><ol start="9"><li>Extension Pack应在几秒钟内安装，并会显示确认消息。<br>[安装Virtualbox Extension Pack]<br>$ yaourt virtualbox-ext-oracle</li></ol><p><code>sudo pacman -S virtualbox-ext-oracle</code><br>最后一步是将您的个人用户帐户添加到vbox用户组。这是完全访问VirtualBox提供的功能所必需的，包括在Guest操作系统中使用USB设备的能力。</p><p>将您的帐户添加到vbox用户组<br>将用户名添加到vbox用户组的命令的语法是：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> gpasswd -a <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span> vboxusers<span class="token function">sudo</span> gpasswd -a li vboxusers<span class="token function">sudo</span> VBoxManage extpack <span class="token function">install</span> --replace Oracle_VM_VirtualBox_Extension_Pack-<span class="token variable">${LatestVirtualBoxVersion}</span>.vbox-extpack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考资料：<a href="https://wiki.manjaro.org/index.php?title=VirtualBox" target="_blank" rel="noopener">https://wiki.manjaro.org/index.php?title=VirtualBox</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、什么是Manjaro&quot;&gt;&lt;a href=&quot;#一、什么是Manjaro&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Manjaro?&quot;&gt;&lt;/a&gt;一、什么是Manjaro?&lt;/h1&gt;&lt;p&gt;Manjaro是一个基于Arch Linux的对用户友好
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://idongliming.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Docker</title>
    <link href="https://idongliming.github.io/post/ubuntu-install-docker.html"/>
    <id>https://idongliming.github.io/post/ubuntu-install-docker.html</id>
    <published>2020-05-05T00:37:00.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等待安装完毕，现在我们使用下面的命令启动 Docker：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行系统引导时启用 docker，命令：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; title=&quot;安装命令&quot;&gt;&lt;/a&gt;安装命令&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bas
      
    
    </summary>
    
    
      <category term="后端" scheme="https://idongliming.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://idongliming.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>python资料</title>
    <link href="https://idongliming.github.io/post/python-zi-liao.html"/>
    <id>https://idongliming.github.io/post/python-zi-liao.html</id>
    <published>2020-05-04T09:38:26.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<p>python相关的学习资料总结索引</p><blockquote><p>面向新手的笔记</p></blockquote><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400" target="_blank" rel="noopener">廖雪峰的python教程</a> ，比较接地气，通俗易懂，网页上可以直接执行代码</li><li><a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener">python官方网站</a> ，全面，具体，可以查自带模块的使用方法，有中文</li><li><a href="https://www.runoob.com/python/python-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a> ，同样有在线工具，相比第一个，这个网站包含的教程比较多，都是语法和框架的</li></ul><h1 id="框架怎么学？"><a href="#框架怎么学？" class="headerlink" title="框架怎么学？"></a>框架怎么学？</h1><p>个人看法，先快速上手，再慢慢深入</p><h2 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h2><ul><li><a href="https://www.bilibili.com/" target="_blank" rel="noopener">bilibli</a> 上看培训班传出的视频，环境搭建跟着做，架子搭起来</li><li>官网上的demo</li><li>CSDN 博客园这类博客网站也可以找上手demo，分分钟可以体验一下某个框架 </li><li><a href="https://www.github.com" target="_blank" rel="noopener">github</a>搜<code>框架名字 demo</code>关键字一般都能找到一些简单入门的程序，星星多的项目一般项目结构也有参考价值</li></ul><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><ul><li><p>官网文档</p></li><li><p>官方文档</p></li><li><p>官方文档</p><p><strong>重要的说三遍，要想把一个框架学精，一定要把官网看完</strong>，官网上的是出处，所有的教程都是从官网上学了以后加工的产物</p></li><li><p>做项目，按照一定的规范去写项目，去github找找有没有人写过某个项目开源了，参考优秀的项目架构，代码规范，任何语言都有代码规范检查工具，一定要用 <code>python</code> 有 <code>pylint</code> ,使用 <a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>做版本控制</p></li></ul><p><strong>github上资源很多，搜教程，搜书，搜代理软件，慢慢探索吧</strong></p><h1 id="关于python依赖"><a href="#关于python依赖" class="headerlink" title="关于python依赖"></a>关于python依赖</h1><p>在windows下安装多版本的 python 可以使用默认安装的 py 命令</p><h2 id="py"><a href="#py" class="headerlink" title="py"></a>py</h2><p>常用命令</p><ul><li>列出安装的所有python版本 <code>py -0</code></li><li>使用指定版本的python运行程序 <code>py -3.6 xx.py</code> 使用3.6版本运行xx.py文件</li><li>指定python版本的pip命令 比如用<code>py -3.6 -m pip</code> 代替pip命令使用python3.6安装模块</li></ul><h2 id="Anacoda"><a href="#Anacoda" class="headerlink" title="Anacoda"></a>Anacoda</h2><p>使用anacoda管理多个版本的python，这个程序是创建虚拟环境用的不同的虚拟环境就像不同的隔离环境，在A环境安装的包在B虚拟环境中需要再次安装，适合电脑上有多个项目，不同项目依赖的包存在冲突时使用</p><p>常用命令</p><ul><li>创建虚拟环境 <code>conda create --name 虚拟环境的名字 python=3.6</code> 创建了一个使用python3.6的虚拟环境</li><li>进入虚拟环境 <code>activate 虚拟环境的名字</code></li><li>退出 <code>deactivate</code> 或者直接关掉终端（cmd）窗口</li></ul><blockquote><p>进入虚拟环境后可以使用pip安装需要用到的包，或者使用<code>conda install 包名</code> 命令安装需要的包<br>    <strong>特殊情况下<code>import</code>时使用的的名字和安装时的名字不同</strong>比如openCV，百度查一下某某包的安装命令</p></blockquote><h2 id="pip-常用命令"><a href="#pip-常用命令" class="headerlink" title="pip 常用命令"></a>pip 常用命令</h2><ul><li>安装一个包 <code>pip install 包名</code></li><li>列出安装的包 <code>pip freeze</code> 这里输出的内容可以保存到文件里，方便在新电脑上安装 <code>pip freeze &gt; requirements.txt</code></li><li>批量安装包，读取前面保存的文件 <code>pip install -r requirements.txt</code> <strong>注意：这里的文件名是一般用这个，但可以随便起名字 项目中打开是 包名==版本号 这样格式的文件是什么就从哪里安装</strong>如果提示文件找不到，检查一下路径</li></ul><blockquote><p>补充 : git 使用<a href="https://git-scm.com/" target="_blank" rel="noopener">教程</a> 或者廖雪峰的git教程<br>    网络问题，从<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">这里</a> 按照说明配置清华大学镜像，其他镜像源还有 豆瓣 阿里等，根据所在位置选择合适的镜像源</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python相关的学习资料总结索引&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面向新手的笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="文档" scheme="https://idongliming.github.io/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>hexo 工具</title>
    <link href="https://idongliming.github.io/post/hexo-edit.html"/>
    <id>https://idongliming.github.io/post/hexo-edit.html</id>
    <published>2020-05-04T08:32:35.000Z</published>
    <updated>2020-07-23T10:31:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-client"><a href="#hexo-client" class="headerlink" title="hexo client"></a>hexo client</h1><p>专为hexo打造的客户端，使用体验：</p><ul><li>传图片方便了很多</li><li>标签分类也能可视化的选择或添加新的</li><li>编辑foront-matter方便很多🤣</li><li>编辑md文件可以可视化，增加一种新的选择，尤其编辑表格，会有优势</li><li>一键发布，不用写命令了，支持github action和原生的hexo g -d</li></ul><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://github.com/gaoyoubo/hexo-client" target="_blank" rel="noopener">hexo client</a></p><h1 id="vscode-hexo-utils"><a href="#vscode-hexo-utils" class="headerlink" title="vscode + hexo utils"></a>vscode + hexo utils</h1><ul><li><p>启动比 hexo client 快</p></li><li><p>传图片方便</p></li><li><p>可以创建管理文章</p></li><li><p>配合简单的node脚本方便快捷</p></li></ul><h2 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://github.com/cwxyz007/vscode-hexo-utils/" target="_blank" rel="noopener">vscode hexo utils</a></p><h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server"</span><span class="token punctuation">,</span>    <span class="token property">"pull"</span><span class="token operator">:</span> <span class="token string">"git pull origin source"</span><span class="token punctuation">,</span>    <span class="token property">"push"</span><span class="token operator">:</span> <span class="token string">"git add . &amp;&amp; git commit -m\"add a post\" &amp;&amp; git push origin source"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo-client&quot;&gt;&lt;a href=&quot;#hexo-client&quot; class=&quot;headerlink&quot; title=&quot;hexo client&quot;&gt;&lt;/a&gt;hexo client&lt;/h1&gt;&lt;p&gt;专为hexo打造的客户端，使用体验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传图
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="工具" scheme="https://idongliming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>戳气球</title>
    <link href="https://idongliming.github.io/post/chuo-qi-qiu.html"/>
    <id>https://idongliming.github.io/post/chuo-qi-qiu.html</id>
    <published>2020-03-13T14:22:37.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这是leetcode 第 312 题 <a href="https://leetcode-cn.com/problems/burst-balloons/" target="_blank" rel="noopener">戳气球</a></p><blockquote><p>有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。<br>现在要求你戳破所有的气球。每当你戳破一个气球 i 时，你可以获得 nums[left] nums[i] nums[right] 个硬币。 这里的 left 和 right 代表和 i 相邻的两个气球的序号。注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。<br>求所能获得硬币的最大数量。</p></blockquote><p>示例1 </p><pre><code>输入： [3,1,5,8] 输出： 167 解释： nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; [] coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167</code></pre><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li><p>dfs+记忆化搜索</p></li><li><p>动态规划</p></li></ul><h3 id="dfs-记忆化搜索"><a href="#dfs-记忆化搜索" class="headerlink" title="dfs+记忆化搜索"></a>dfs+记忆化搜索</h3><p>对于区间 [l, r] ，我们考虑最后一个被戳破的气球 k ，那么之前的步骤我们可以分为两步，也就是求 [l, k-1] 和 [k+1, r] 之间的最大分数。</p><p>那么为什么不考虑先戳破 k 呢？因为这样的话 [l, k-1] 和 [k+1, r] 就会连接在一起，两个子状态就不能独立计算了，互相会产生影响。</p><p>两个子区间的最大的分算完之后，最后 k 的得分就是 nums[l-1] nums[k] nums[r+1] ，取使得总得分最高的 k 就行了。</p><p>有一个小技巧就是，提示里也说了，就是刚开始的时候在首尾各添加一个分数为 1 的虚拟气球。</p><p>但是直接这样递归会超时，因为有很多的子状态都重复计算了，所以可以用一个全局的数组保存每个状态的分数。初始化为 -1 ，如果某个状态计算过了，就直接返回它的值就行了，不然就递归计算。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxCoins</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span>        <span class="token keyword">if</span> l <span class="token operator">></span> r<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>l<span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> res        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxCoins</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;这是leetcode 第 312 题 &lt;a href=&quot;https://leetcode-cn.com/problems/b
      
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="https://idongliming.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://idongliming.github.io/tags/leetcode/"/>
    
      <category term="dfs" scheme="https://idongliming.github.io/tags/dfs/"/>
    
      <category term="动态规划" scheme="https://idongliming.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>双蛋问题</title>
    <link href="https://idongliming.github.io/post/shuang-dan-wen-ti.html"/>
    <id>https://idongliming.github.io/post/shuang-dan-wen-ti.html</id>
    <published>2020-03-12T12:25:49.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p>李永乐老师的视频,讲的很通俗易懂了，下面做一下leetcode对应的题</p><iframe width="830" height="515" src="https://www.youtube.com/embed/mLV_vOet0ss" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这是leetcode 第 887 题 <a href="https://leetcode-cn.com/problems/super-egg-drop/" target="_blank" rel="noopener">鸡蛋掉落</a></p><blockquote><p>你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。<br>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。<br>你知道存在楼层 F ，满足 0 &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。<br>每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 &lt;= X &lt;= N）。<br>你的目标是确切地知道 F 的值是多少。<br>无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</p></blockquote><p>示例 1</p><pre><code>输入：K = 1, N = 2输出：2解释：鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。如果它没碎，那么我们肯定知道 F = 2 。因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。</code></pre><p>示例 2</p><pre><code>输入：K = 2, N = 6输出：3</code></pre><p>示例 3 </p><pre><code>输入：K = 3, N = 14输出：4</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>穷举法</p></li><li><p>二分法</p></li><li><p>动态规划</p></li></ul><h3 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h3><p>最简单的方法就是一层一层试验，这样只需要一个鸡蛋就可以了。</p><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>使用二分查找，例如，第一个鸡蛋再50层扔下，如果碎了，第二个鸡蛋从1-49逐层试验；如果没碎，第一个鸡蛋在75层扔下，如果碎了，第二个鸡蛋从51-74逐层试验…但是，这个方法，很容易悲剧，例如，当正好49层是可以安全落下的，需要尝试50次。比只有一个鸡蛋的情况，效果还要差。</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>采用动态规划的方法，最重要的是要找到子问题。做如下的分析，假设f{n}表示从第n层楼扔下鸡蛋，没有摔碎的最少尝试次数。第一个鸡蛋，可能的落下位置(1,n),第一个鸡蛋从第i层扔下，有两个情况：</p><ul><li><p>碎了，第二个鸡蛋，需要从第一层开始试验，有i-1次机会</p></li><li><p>没碎，两个鸡蛋，还有n-i层。这个就是子问题了f{n-i}</p></li></ul><p>所以，当第一个鸡蛋，由第i个位置落下的时候，要尝试的次数为1 + max(i - 1, f{n - i})，那么对于每一个i，尝试次数最少的，就是f{n}的值。状态转移方程如下：<br>f{n} = min(1 + max(i - 1, f{n - 1}) ) 其中: i的范围为(1, n), f{1} = 1</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>二分法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">superEggDrop</span><span class="token punctuation">(</span><span class="token keyword">int</span> K<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">dp</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> K<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>memo<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> K<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> ans<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>K <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                ans <span class="token operator">=</span> N<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> N<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>lo <span class="token operator">+</span> hi<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> t1 <span class="token operator">=</span> <span class="token function">dp</span><span class="token punctuation">(</span>K<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> t2 <span class="token operator">=</span> <span class="token function">dp</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">&lt;</span> t2<span class="token punctuation">)</span>                        lo <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">></span> t2<span class="token punctuation">)</span>                        hi <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        lo <span class="token operator">=</span> hi <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ans <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dp</span><span class="token punctuation">(</span>K<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> lo<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dp</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token operator">-</span>lo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dp</span><span class="token punctuation">(</span>K<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dp</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token operator">-</span>hi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            memo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> K<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> memo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>动态规划</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">superEggDrop</span><span class="token punctuation">(</span><span class="token keyword">int</span> K<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Right now, dp[i] represents dp(1, i)</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Now, we will develop dp2[i] = dp(k, i)</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Let's find dp2[n] = dp(k, n)</span>                <span class="token comment" spellcheck="true">// Increase our optimal x while we can make our answer better.</span>                <span class="token comment" spellcheck="true">// Notice max(dp[x-1], dp2[n-x]) > max(dp[x], dp2[n-x-1])</span>                <span class="token comment" spellcheck="true">// is simply max(T1(x-1), T2(x-1)) > max(T1(x), T2(x)).</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>n<span class="token operator">-</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>n<span class="token operator">-</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    x<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// The final answer happens at this x.</span>                dp2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>n<span class="token operator">-</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dp <span class="token operator">=</span> dp2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>leetcode hard 看科普视频看懂了，实际做 leetcode 动态规划还有欠缺，下一步重点理解动态规划</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考视频&quot;&gt;&lt;a href=&quot;#参考视频&quot; class=&quot;headerlink&quot; title=&quot;参考视频&quot;&gt;&lt;/a&gt;参考视频&lt;/h2&gt;&lt;p&gt;李永乐老师的视频,讲的很通俗易懂了，下面做一下leetcode对应的题&lt;/p&gt;
&lt;iframe width=&quot;830&quot; he
      
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="https://idongliming.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://idongliming.github.io/tags/leetcode/"/>
    
      <category term="动态规划" scheme="https://idongliming.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="二分法" scheme="https://idongliming.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Github Action 实现 Hexo 自动部署</title>
    <link href="https://idongliming.github.io/post/github-action-build-hexo.html"/>
    <id>https://idongliming.github.io/post/github-action-build-hexo.html</id>
    <published>2020-03-11T12:46:21.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://help.github.com/en/articles/about-github-actions" target="_blank" rel="noopener">GitHub Actions</a> 由 GitHub 官方的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。这里介绍响应 git push 事件触发 Hexo 编译静态页面并推送到 GitHub Pages 的用法。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>生成 ssh 部署私钥</p><pre class="line-numbers language-bash"><code class="language-bash">  ssh-keygen -t ed25519 -f ~/.ssh/github-actions-deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 GitHub repo 的 <code>Settings/Deploy keys</code> 中添加刚刚生成的公钥</p></li><li><p>在 GitHub repo 的 <code>Settings/Secrets</code> 中添加 <code>GH_ACTION_DEPLOY_KEY</code>，值为刚刚生成的私钥</p></li></ul><p>也可以使用添加到github的密钥对<strong>不需要</strong>添加部署公钥只添加<strong>私钥</strong>到<code>Settings/Secrets</code></p><h3 id="编写-GitHub-Actions"><a href="#编写-GitHub-Actions" class="headerlink" title="编写 GitHub Actions"></a>编写 GitHub Actions</h3><ul><li><p>在项目的根目录添加 <code>deploy.yml</code>，目录结构如下</p><pre class="line-numbers language-bash"><code class="language-bash">  .github  └── workflows  └── deploy.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li><p>添加部署私钥到 GitHub Actions 执行的容器中</p></li><li><p>在容器中安装 Hexo 以及相关的插件</p></li><li><p>克隆主题 <a href="git@github.com:blinkfox/hexo-theme-matery.git">matery</a> 并覆盖默认配置</p></li><li><p>编译静态页面</p></li><li><p>推送编译好的文件到 GitHub Pages</p></li><li><p>编写部署的 action</p></li></ul><pre class="line-numbers language-yaml"><code class="language-yaml">    <span class="token key atrule">name</span><span class="token punctuation">:</span> Main workflow<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> source<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">18.04</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js 10.x      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'10.x'</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> prepare build env      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">GH_ACTION_DEPLOY_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GH_ACTION_DEPLOY_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$GH_ACTION_DEPLOY_KEY" > ~/.ssh/id_rsa        chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com >> ~/.ssh/known_hosts        git config --global user.name 'idongliming'        git config --global user.email 'idongliming@qq.com'        npm i -g hexo-cli        npm i        git clone -b master git@github.com:blinkfox/hexo-theme-matery.git themes/matery        cp source/_data/matery.yml themes/matery/_config.yml</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> deploy to github      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        hexo generate &amp;&amp; hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>使用github action 可以保证构建环境一致，临时更换电脑写博客不用搭建环境，装上git就可以写，这样的方式同样适用非专业的同学使用github搭建博客，用<a href="https://desktop.github.com/" target="_blank" rel="noopener">github desktop</a> clone项目编写发布即可</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions" target="_blank" rel="noopener">Workflow syntax for GitHub Actions</a></li><li><a href="https://gythialy.github.io/deploy-hexo-to-github-pages-via-github-actions/" target="_blank" rel="noopener">gythialy’s blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://help.github.com/en/articles/about-github-actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Actions&lt;/a&gt; 由 GitHub 官方的工作流工具。典型
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="github" scheme="https://idongliming.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://idongliming.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>十大经典排序算法</title>
    <link href="https://idongliming.github.io/post/sort.html"/>
    <id>https://idongliming.github.io/post/sort.html</id>
    <published>2020-02-24T09:32:14.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="十大经典排序算法"><a href="#十大经典排序算法" class="headerlink" title="十大经典排序算法"></a>十大经典排序算法</h2><p>排序算法是《数据结构与算法》中最基本的算法之一。<br>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p><!-- ![sort.png](https://i.loli.net/2020/03/11/Di69mhrO1GaolVX.png) --><a id="more"></a><p><img src="/post/sort/sort.png" alt="复杂度" loading="lazy"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 总共要经过 N-1 轮比较</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 每轮需要比较的次数 N-i</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 记录目前能找到的最小值元素的下标</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将找到的最小值和i位置所在的值进行交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 记录要插入的数据</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从已经排序的序列最右边的开始比较，找到比其小的数</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 存在比其小的数，插入</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> gap <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gap <span class="token operator">=</span> gap <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    j <span class="token operator">-=</span> gap<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            gap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>left<span class="token punctuation">.</span>length <span class="token operator">+</span> right<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> partitionIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partitionIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partitionIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设定基准值（pivot）</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            len<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            largest <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            largest <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountingSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">countingSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> bucketLen <span class="token operator">=</span> maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>bucketLen<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sortedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucketLen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>sortedIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxValue <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxValue <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BucketSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> InsertSort insertSort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketSize<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minValue <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxValue <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> bucketCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>bucketCount<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 利用映射函数将数据分配到各个桶中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">arrAppend</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> arrIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">:</span> buckets<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 对每个桶进行排序，这里使用了插入排序</span>            bucket <span class="token operator">=</span> insertSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>arrIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自动扩容，并保存数据     *     * @param arr     * @param value     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrAppend</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 基数排序 * 考虑负数的情况还可以参考： https://code.i-harness.com/zh-CN/q/e98fa9 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadixSort</span> <span class="token keyword">implements</span> <span class="token class-name">IArraySort</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxDigit <span class="token operator">=</span> <span class="token function">getMaxDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxDigit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取最高位数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getMaxDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getNumLenght</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxValue <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxValue <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getNumLenght</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> lenght <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> temp <span class="token operator">=</span> num<span class="token punctuation">;</span> temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lenght<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lenght<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> maxDigit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> dev <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>mod <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> bucket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">)</span> <span class="token operator">+</span> mod<span class="token punctuation">;</span>                counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">arrayAppend</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">:</span> counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自动扩容，并保存数据     *     * @param arr     * @param value     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrayAppend</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>参考地址</em> <a href="https://github.com/hustcc/JS-Sorting-Algorithm" target="_blank" rel="noopener">JS-Sorting-Algorithm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;十大经典排序算法&quot;&gt;&lt;a href=&quot;#十大经典排序算法&quot; class=&quot;headerlink&quot; title=&quot;十大经典排序算法&quot;&gt;&lt;/a&gt;十大经典排序算法&lt;/h2&gt;&lt;p&gt;排序算法是《数据结构与算法》中最基本的算法之一。&lt;br&gt;排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。&lt;/p&gt;
&lt;!-- ![sort.png](https://i.loli.net/2020/03/11/Di69mhrO1GaolVX.png) --&gt;
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="https://idongliming.github.io/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="sort" scheme="https://idongliming.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>HashMap中的红黑树</title>
    <link href="https://idongliming.github.io/post/source-hashmap-one.html"/>
    <id>https://idongliming.github.io/post/source-hashmap-one.html</id>
    <published>2019-10-21T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阅读java api源码，可以学到很多的设计模式，优秀的算法实现</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>jdk8之前没有使用红黑树，出现哈希冲突采用哈希桶解决，当哈希冲突过多时会出现效率问题，jdk8采用红黑树，默认当哈希桶链表长度达到8时将链表转化成树，提高操作效率</p><a id="more"></a><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>红黑树是什么？有什么优势？</p><h2 id="什么是红黑树"><a href="#什么是红黑树" class="headerlink" title="什么是红黑树"></a>什么是红黑树</h2><p>摘自百科</p><blockquote><p>红黑树（Red Black Tree） 是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。<br>它是在1972年由Rudolf Bayer发明的，当时被称为平衡二叉B树（symmetric binary B-trees）。后来，在1978年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的“红黑树”。<br>红黑树和AVL树类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。<br>它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的： 它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。</p></blockquote><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>红黑树不仅是二叉查找树，它还必须满足以下5个性质</p><ul><li>节点非黑即红</li><li>根节点是黑色</li><li>每个叶节点（NIL节点，空节点）是黑色的</li><li>每个红色节点的两个子节点都是黑色(从每个叶子到根的所有路径上不能有两个连续的红色节点)</li><li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点</li></ul><p>相比于平衡二叉树(avl),红黑树追求的是 <strong>相对平衡</strong></p><p>红黑树的效率相对较高，所以它被用来存储相关数据，基本的操作有增加/删除/查找，在这些操作之后可能会破坏红黑树的性质，所以需要相关操作来维护以让红黑树符合上面的性质要求。</p><h2 id="左旋右旋"><a href="#左旋右旋" class="headerlink" title="左旋右旋"></a>左旋右旋</h2><p>对红黑树进行插入，删除等操作后，会导致不满足红黑树的条件，所以需要进行调整</p><ul><li>左旋</li></ul><blockquote><p>将x的右子树绕x逆时针旋转，使得x的右子树成为x的父亲，并修改相关引用。</p></blockquote><ul><li>右旋</li></ul><blockquote><p>是将x的左子树绕x顺时针旋转，使得x的左子树成为x的父亲，并修改相关的引用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;阅读java api源码，可以学到很多的设计模式，优秀的算法实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;jdk8之前没有使用红黑树，出现哈希冲突采用哈希桶解决，当哈希冲突过多时会出现效率问题，jdk8采用红黑树，默认当哈希桶链表长度达到8时将链表转化成树，提高操作效率&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="阅读源码" scheme="https://idongliming.github.io/tags/%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio</title>
    <link href="https://idongliming.github.io/post/visual-studio.html"/>
    <id>https://idongliming.github.io/post/visual-studio.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<p>地球上最好用的 C++ 开发环境，没有之一。现在也有免费的社区版了，可惜以前密集写 C++ 代码的时候没赶上。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><a id="more"></a><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>快速打开 anything</td><td>C-,</td></tr><tr><td>当前打开文件</td><td>C-M-Down</td></tr><tr><td>切换头/源文件</td><td>C-ko</td></tr><tr><td>返回</td><td>C–</td></tr><tr><td>前进</td><td>C-S–</td></tr><tr><td>跳转到定义</td><td>F12</td></tr><tr><td>在新窗口展示定义</td><td>M-F12</td></tr><tr><td>跳转到声明</td><td>C-M-F12</td></tr><tr><td>上/下移动行</td><td>M-Up/Down</td></tr><tr><td>在上面插入行</td><td>C-Enter</td></tr><tr><td>在下面插入行</td><td>C-S-Enter</td></tr><tr><td>折叠/展开当前代码段</td><td>C-mm</td></tr><tr><td>注释</td><td>C-kc</td></tr><tr><td>取消注释</td><td>C-ku</td></tr><tr><td>选中单词大写</td><td>C-S-u</td></tr><tr><td>选中单词小写</td><td>C-u</td></tr><tr><td>调试</td><td>F5</td></tr><tr><td>执行</td><td>C-F5</td></tr><tr><td>设置断点</td><td>F9</td></tr><tr><td>步过</td><td>F10</td></tr><tr><td>步入</td><td>F11</td></tr></tbody></table><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=NoahRichards.GoToDefinition" target="_blank" rel="noopener">Go To Definition</a></p><p>Make ctrl+click perform a “Go To Definition” on the identifier under the cursor.</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=WholeTomatoSoftware.VisualAssist" target="_blank" rel="noopener">Visual Assist</a></p><p>Productivity tool for C/C++ and C# that improves IDE features related to navigation, refactoring, code generation, and coding assistance.</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://wenku.baidu.com/link?url=HPb7QlXnADYV7xgZ9lBHgGWTMcS-srDHselMynLfgG_kd7OXGM25qv6KWxzHfU5HbHDJTHHFLXJ0RsJv9295VFxJKusvjo1JlvQ0yfoUuda" target="_blank" rel="noopener">visual studio 2013 快捷键大全、VS2013常用快捷键完整页</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;地球上最好用的 C++ 开发环境，没有之一。现在也有免费的社区版了，可惜以前密集写 C++ 代码的时候没赶上。&lt;/p&gt;
&lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;
    
    </summary>
    
    
      <category term="介绍" scheme="https://idongliming.github.io/categories/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="visual studio" scheme="https://idongliming.github.io/tags/visual-studio/"/>
    
  </entry>
  
  <entry>
    <title>OneNote</title>
    <link href="https://idongliming.github.io/post/onenote.html"/>
    <id>https://idongliming.github.io/post/onenote.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>C –&gt; Ctrl</p><p>S –&gt; Shift</p><p>M –&gt; Alt</p><a id="more"></a><p>Cmd –&gt; Command</p><h3 id="调整文本格式"><a href="#调整文本格式" class="headerlink" title="调整文本格式"></a>调整文本格式</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows</th><th align="left">Mac OS X</th></tr></thead><tbody><tr><td align="left">高亮选中文本</td><td align="left">C-S-h 或 C-M-h</td><td align="left"></td></tr><tr><td align="left">插入超链接</td><td align="left">C-k</td><td align="left">Cmd-k</td></tr><tr><td align="left">复制选中文本的格式（格式刷）</td><td align="left">C-S-c</td><td align="left">Cmd-M-c</td></tr><tr><td align="left">应用格式刷到选中文本</td><td align="left">C-S-v</td><td align="left">Cmd-M-v</td></tr><tr><td align="left">打开光标下的链接</td><td align="left">Enter</td><td align="left">Enter</td></tr><tr><td align="left">加黑</td><td align="left">C-b</td><td align="left">Cmd-b</td></tr><tr><td align="left">斜体</td><td align="left">C-i</td><td align="left">Cmd-i</td></tr><tr><td align="left">下划线</td><td align="left">C-u</td><td align="left">Cmd-u</td></tr><tr><td align="left">删除线</td><td align="left">C-Hyphen(-)</td><td align="left">C-Cmd-Hyphen(-)</td></tr><tr><td align="left">上标</td><td align="left">C-S-=</td><td align="left"></td></tr><tr><td align="left">下标</td><td align="left">C-=</td><td align="left"></td></tr><tr><td align="left">无序列表标记</td><td align="left">C-Period(.)</td><td align="left">Cmd-Period(.)</td></tr><tr><td align="left">有序列表标记</td><td align="left">C-Slash(/)</td><td align="left">Cmd-Slash(/)</td></tr><tr><td align="left">标题一</td><td align="left">C-M-1</td><td align="left">Cmd-M-1</td></tr><tr><td align="left">标题六</td><td align="left">C-M-6</td><td align="left">Cmd-M-6</td></tr><tr><td align="left">正文，清除格式</td><td align="left">C-S-n</td><td align="left">Cmd-S-n</td></tr><tr><td align="left">增加段落缩进</td><td align="left">M-S-Right</td><td align="left">Cmd-]</td></tr><tr><td align="left">减少段落缩进</td><td align="left">M-S-Left</td><td align="left">Cmd-[</td></tr><tr><td align="left">左对齐</td><td align="left">C-l</td><td align="left">Cmd-l</td></tr><tr><td align="left">右对齐</td><td align="left">C-r</td><td align="left">Cmd-r</td></tr><tr><td align="left">增大选中文本字体</td><td align="left">C-S-&gt;</td><td align="left"></td></tr><tr><td align="left">减小选中文本字体</td><td align="left">C-S-&lt;</td><td align="left"></td></tr><tr><td align="left">在当前页面显隐基准线</td><td align="left">C-S-r</td><td align="left"></td></tr></tbody></table><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows</th><th align="left">Mac OS X</th></tr></thead><tbody><tr><td align="left">插入日期</td><td align="left">M-S-d</td><td align="left">Cmd-d</td></tr><tr><td align="left">插入时间</td><td align="left">M-S-t</td><td align="left"></td></tr><tr><td align="left">插入日期+时间</td><td align="left">M-S-f</td><td align="left">Cmd-S-d</td></tr></tbody></table><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows</th><th align="left">Mac OS X</th></tr></thead><tbody><tr><td align="left">在当前行下面新建行</td><td align="left">C-Enter</td><td align="left">Cmd-Enter</td></tr><tr><td align="left">在当前行上面新建行</td><td align="left">光标移到行首，Enter</td><td align="left">光标移到行首，Enter</td></tr><tr><td align="left">在当前列右边新建列</td><td align="left">C-M-r</td><td align="left">C-Cmd-r</td></tr><tr><td align="left">在当前列左边新建列</td><td align="left"></td><td align="left">C-Cmd-l</td></tr><tr><td align="left">在当前单元格开始新段落</td><td align="left">M-Enter</td><td align="left"></td></tr></tbody></table><h3 id="选择与移动"><a href="#选择与移动" class="headerlink" title="选择与移动"></a>选择与移动</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows</th><th align="left">Mac OS X</th></tr></thead><tbody><tr><td align="left">移动光标到页面标题并选中</td><td align="left">C-S-t</td><td align="left">Cmd-S-t</td></tr><tr><td align="left">将段落上移</td><td align="left">M-S-Up</td><td align="left">Cmd-M-Up</td></tr><tr><td align="left">将段落下移</td><td align="left">M-S-Down</td><td align="left">Cmd-M-Down</td></tr><tr><td align="left">返回上一个访问过的页面</td><td align="left">M-Left</td><td align="left">C-Cmd-Left</td></tr><tr><td align="left">前进到后一个访问过的页面</td><td align="left">M-Right</td><td align="left">C-Cmd-Right</td></tr></tbody></table><h3 id="分区与页面"><a href="#分区与页面" class="headerlink" title="分区与页面"></a>分区与页面</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows</th><th align="left">Mac OS X</th></tr></thead><tbody><tr><td align="left">新建页面到当前分区最后面</td><td align="left">C-n</td><td align="left">Cmd-n</td></tr><tr><td align="left">在当前页面下新建同级页面</td><td align="left">C-M-n</td><td align="left">Cmd-n</td></tr><tr><td align="left">在当前页面下新建子页面</td><td align="left">C-M-S-n</td><td align="left"></td></tr><tr><td align="left">增加页面层级</td><td align="left">C-M-]</td><td align="left">Cmd-M-]</td></tr><tr><td align="left">减少页面层级</td><td align="left">C-M-[</td><td align="left">Cmd-M-[</td></tr><tr><td align="left">选中当前页面</td><td align="left">C-M-g</td><td align="left">Cmd-S-a</td></tr><tr><td align="left">上移当前选中页面</td><td align="left">M-S-Up</td><td align="left">Cmd-M-Up</td></tr><tr><td align="left">下移当前选中页面</td><td align="left">M-S-Down</td><td align="left">Cmd-M-Down</td></tr><tr><td align="left">返回访问的上一页</td><td align="left">M-Left</td><td align="left">C-Cmd-Left</td></tr><tr><td align="left">返回访问的下一页</td><td align="left">M-Right</td><td align="left">C-Cmd-Right</td></tr><tr><td align="left">停靠到桌面</td><td align="left">C-M-d</td><td align="left"></td></tr><tr><td align="left">显示上一个分区</td><td align="left">C-S-Tab</td><td align="left"></td></tr><tr><td align="left">显示下一个分区</td><td align="left">C-Tab</td><td align="left"></td></tr><tr><td align="left">显示当前分区的上一个页面</td><td align="left">C-Page Up</td><td align="left"></td></tr><tr><td align="left">显示当前分区的下一个页面</td><td align="left">C-Page Down</td><td align="left"></td></tr><tr><td align="left">显示当前分区的第一个页面</td><td align="left">M-Home</td><td align="left"></td></tr><tr><td align="left">显示当前分区的最后一个页面</td><td align="left">M-End</td><td align="left"></td></tr></tbody></table><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li><p>搜索带特殊字符如「空格」等，用 <code>&quot;</code> 将搜索关键字括起来。</p></li><li><p>删除「我的模板」</p><p>在 Windows 下的 <code>C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates</code> 里找到文件 <code>我的模板.one</code>，双击打开将显示你所有的模板页面，删除你想要删除的然后关闭即可。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://support.office.com/zh-cn/article/OneNote-2010-%E7%9A%84%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE-7504cf95-1a03-40d9-9544-090901174620?ui=zh-CN&rs=zh-CN&ad=CN&fromAR=1" target="_blank" rel="noopener">OneNote 2010 的键盘快捷键</a></li><li><a href="https://support.office.com/zh-cn/article/Keyboard-shortcuts-in-OneNote-for-Windows-10-1b57578a-b72e-467a-b38d-266363fe73b0?ui=zh-CN&rs=zh-CN&ad=CN" target="_blank" rel="noopener">Keyboard shortcuts in OneNote for Windows 10</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;p&gt;C –&amp;gt; Ctrl&lt;/p&gt;
&lt;p&gt;S –&amp;gt; Shift&lt;/p&gt;
&lt;p&gt;M –&amp;gt; Alt&lt;/p&gt;
    
    </summary>
    
    
      <category term="介绍" scheme="https://idongliming.github.io/categories/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="工具" scheme="https://idongliming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python内置工具</title>
    <link href="https://idongliming.github.io/post/python.html"/>
    <id>https://idongliming.github.io/post/python.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>优雅简单的 HTTP 模块。</p><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><p>很好用的 HTML/XML 解析器。</p><a id="more"></a><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>JSON 编码解码器。</p><p>应用举例：</p><ul><li><p>格式化 JSON 文件</p><pre class="line-numbers language-sh"><code class="language-sh">python -m json.tool src.json > dst.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Vim 里格式化 JSON：</p><pre class="line-numbers language-sh"><code class="language-sh">:%!python -m json.tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="CGIHTTPServer"><a href="#CGIHTTPServer" class="headerlink" title="CGIHTTPServer"></a>CGIHTTPServer</h3><p>简单实用的 HTTP 服务器。</p><p>应用举例：</p><ul><li><p>运行一个简易的 HTTP 服务器</p><pre class="line-numbers language-sh"><code class="language-sh">python -m CGIHTTPServer 80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>方便地进行 base64 编解码的模块。</p><p>应用举例：</p><ul><li><p>解码 base64</p><pre class="line-numbers language-sh"><code class="language-sh">echo aGVsbG93b3JsZA== | python -m base64 -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则能看到输出</p><pre class="line-numbers language-sh"><code class="language-sh">helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;requests&quot;&gt;&lt;a href=&quot;#requests&quot; class=&quot;headerlink&quot; title=&quot;requests&quot;&gt;&lt;/a&gt;requests&lt;/h3&gt;&lt;p&gt;优雅简单的 HTTP 模块。&lt;/p&gt;
&lt;h3 id=&quot;BeautifulSoup&quot;&gt;&lt;a href=&quot;#BeautifulSoup&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup&quot;&gt;&lt;/a&gt;BeautifulSoup&lt;/h3&gt;&lt;p&gt;很好用的 HTML/XML 解析器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://idongliming.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://idongliming.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>QtCreater</title>
    <link href="https://idongliming.github.io/post/qt-creator.html"/>
    <id>https://idongliming.github.io/post/qt-creator.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快捷键（for-mac）"><a href="#快捷键（for-mac）" class="headerlink" title="快捷键（for mac）"></a>快捷键（for mac）</h3><p>参考：<a href="http://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html" target="_blank" rel="noopener">http://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html</a></p><p>C –&gt; Ctrl</p><p>S –&gt; Shift</p><p>M –&gt; Alt</p><a id="more"></a><p>Cmd –&gt; Command</p><table><thead><tr><th align="left">功能</th><th align="left">快捷键</th></tr></thead><tbody><tr><td align="left">自动完成</td><td align="left">C-Space</td></tr><tr><td align="left">显示/隐藏侧边栏</td><td align="left">Cmd-0</td></tr><tr><td align="left">切换已打开的文件</td><td align="left">M-Tab</td></tr><tr><td align="left">上/下一行</td><td align="left">C-p/C-n</td></tr><tr><td align="left">前进/后退一个字符</td><td align="left">C-f/C-b</td></tr><tr><td align="left">删除一个单词</td><td align="left">M-Del</td></tr><tr><td align="left">构建</td><td align="left">Cmd-b</td></tr><tr><td align="left">运行</td><td align="left">Cmd-r</td></tr><tr><td align="left">调试</td><td align="left">Cmd-y</td></tr><tr><td align="left">注释</td><td align="left">Cmd-/</td></tr><tr><td align="left">换行</td><td align="left">Cmd-Return</td></tr><tr><td align="left">跳到定义</td><td align="left">F2</td></tr><tr><td align="left">切换头文件与源文件</td><td align="left">F4</td></tr><tr><td align="left">前进/后退</td><td align="left">M-Cmd-Left/Right</td></tr><tr><td align="left">打开定位器</td><td align="left">Cmd-k</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;快捷键（for-mac）&quot;&gt;&lt;a href=&quot;#快捷键（for-mac）&quot; class=&quot;headerlink&quot; title=&quot;快捷键（for mac）&quot;&gt;&lt;/a&gt;快捷键（for mac）&lt;/h3&gt;&lt;p&gt;参考：&lt;a href=&quot;http://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C –&amp;gt; Ctrl&lt;/p&gt;
&lt;p&gt;S –&amp;gt; Shift&lt;/p&gt;
&lt;p&gt;M –&amp;gt; Alt&lt;/p&gt;
    
    </summary>
    
    
      <category term="介绍" scheme="https://idongliming.github.io/categories/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="工具" scheme="https://idongliming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>eclipse</title>
    <link href="https://idongliming.github.io/post/eclipse.html"/>
    <id>https://idongliming.github.io/post/eclipse.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>C –&gt; Ctrl</p><a id="more"></a><p>S –&gt; Shift</p><p>A –&gt; Alt</p><table><thead><tr><th align="left">功能</th><th align="left">快捷键</th></tr></thead><tbody><tr><td align="left">显示所有快捷键</td><td align="left">C-S-l</td></tr><tr><td align="left">开/关注释</td><td align="left">C-/</td></tr><tr><td align="left">显示 outline</td><td align="left">C-o</td></tr><tr><td align="left">当前打开的文件列表</td><td align="left">C-e</td></tr><tr><td align="left">快速查找打开文件</td><td align="left">C-S-r</td></tr><tr><td align="left">查找</td><td align="left">C-h</td></tr><tr><td align="left">查找后跳到下一处</td><td align="left">C-.</td></tr><tr><td align="left">Undo</td><td align="left">C-z</td></tr><tr><td align="left">Redo</td><td align="left">C-y</td></tr><tr><td align="left">跳到指定行</td><td align="left">C-l</td></tr><tr><td align="left">自动补全</td><td align="left">A-/</td></tr><tr><td align="left">自动解决导入包问题</td><td align="left">C-S-o</td></tr><tr><td align="left">返回</td><td align="left">A-Left</td></tr><tr><td align="left">反返回</td><td align="left">A-Right</td></tr><tr><td align="left">步进</td><td align="left">F5</td></tr><tr><td align="left">单步</td><td align="left">F6</td></tr><tr><td align="left">执行到返回</td><td align="left">F7</td></tr><tr><td align="left">继续执行</td><td align="left">F8</td></tr><tr><td align="left">删除当前行</td><td align="left">C-d</td></tr><tr><td align="left">删除前一个词</td><td align="left">C-Backspace</td></tr><tr><td align="left">删除后一个词</td><td align="left">C-Delete</td></tr><tr><td align="left">缩进</td><td align="left">Tab</td></tr><tr><td align="left">减少缩进</td><td align="left">S-Tab</td></tr><tr><td align="left">在下面新起一行</td><td align="left">S-Enter</td></tr><tr><td align="left">在上面新起一行</td><td align="left">C-S-Enter</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h3&gt;&lt;p&gt;C –&amp;gt; Ctrl&lt;/p&gt;
    
    </summary>
    
    
      <category term="介绍" scheme="https://idongliming.github.io/categories/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="工具" scheme="https://idongliming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>spring boot数据库配置</title>
    <link href="https://idongliming.github.io/post/spring-boot-database.html"/>
    <id>https://idongliming.github.io/post/spring-boot-database.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="框架配置"><a href="#框架配置" class="headerlink" title="框架配置"></a>框架配置</h1><h2 id="jpa"><a href="#jpa" class="headerlink" title="jpa"></a>jpa</h2><ul><li>导入依赖<a id="more"></a><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>- 配置``` yamlspring:     jpa:         hibernate:             ddl-auto: update        show-sql: true</code></pre><ul><li>dao接口继承JpaRepository就可以调用其中的方法操纵数据库了</li></ul><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><ul><li>导入依赖</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml <span class="token comment" spellcheck="true"># mapper文件位置</span>    <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xxx.model <span class="token comment" spellcheck="true"># 实体类的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在spring boot启动类上加<code>@MapperScan(basePackages = &quot;com.xxx&quot;)</code></p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>广泛使用的关系型数据库,在spring boot中配置方式为</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/dbname<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf8<span class="token important">&amp;useSSL</span>=false        <span class="token key atrule">username</span><span class="token punctuation">:</span>         password<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h1><p>java实现的嵌入数据库，不需要安装，适合编写damo使用，在spring boot中的配置方式为</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">h2</span><span class="token punctuation">:</span>        <span class="token key atrule">console</span><span class="token punctuation">:</span>            <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 启用自带的控制台界面访问/h2-console</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>testdb;DB_CLOSE_DELAY=<span class="token punctuation">-</span>1;DB_CLOSE_ON_EXIT=FALSE        <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> org.h2.Driver        <span class="token key atrule">username</span><span class="token punctuation">:</span>         password<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;框架配置&quot;&gt;&lt;a href=&quot;#框架配置&quot; class=&quot;headerlink&quot; title=&quot;框架配置&quot;&gt;&lt;/a&gt;框架配置&lt;/h1&gt;&lt;h2 id=&quot;jpa&quot;&gt;&lt;a href=&quot;#jpa&quot; class=&quot;headerlink&quot; title=&quot;jpa&quot;&gt;&lt;/a&gt;jpa&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;导入依赖&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://idongliming.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring" scheme="https://idongliming.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>axure</title>
    <link href="https://idongliming.github.io/post/axure.html"/>
    <id>https://idongliming.github.io/post/axure.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>C –&gt; Ctrl</p><p>S –&gt; Shift</p><p>M –&gt; Alt</p><p>Cmd –&gt; Command</p><a id="more"></a><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows</th><th align="left">Mac OS X</th></tr></thead><tbody><tr><td align="left">当前页面下新建页面</td><td align="left">C-Return</td><td align="left"></td></tr><tr><td align="left">预览</td><td align="left">F5</td><td align="left"></td></tr><tr><td align="left">生成 HTML 文件</td><td align="left">F8</td><td align="left"></td></tr><tr><td align="left">置于顶层</td><td align="left">C-S-]</td><td align="left"></td></tr><tr><td align="left">置于底层</td><td align="left">C-S-[</td><td align="left"></td></tr><tr><td align="left">上移一层</td><td align="left">C-]</td><td align="left"></td></tr><tr><td align="left">下移一层</td><td align="left">C-[</td><td align="left"></td></tr><tr><td align="left">开关左侧功能栏</td><td align="left">C-M-[</td><td align="left"></td></tr><tr><td align="left">开关右侧功能栏</td><td align="left">C-M-]</td><td align="left"></td></tr></tbody></table><h3 id="操作多个元件"><a href="#操作多个元件" class="headerlink" title="操作多个元件"></a>操作多个元件</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows</th><th align="left">Mac OS X</th></tr></thead><tbody><tr><td align="left">左对齐</td><td align="left">C-M-l</td><td align="left"></td></tr><tr><td align="left">左右居中</td><td align="left">C-M-c</td><td align="left"></td></tr><tr><td align="left">右对齐</td><td align="left">C-M-r</td><td align="left"></td></tr><tr><td align="left">顶部对齐</td><td align="left">C-M-t</td><td align="left"></td></tr><tr><td align="left">上下居中</td><td align="left">C-M-m</td><td align="left"></td></tr><tr><td align="left">底部对齐</td><td align="left">C-M-b</td><td align="left"></td></tr><tr><td align="left">组合</td><td align="left">C-g</td><td align="left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;p&gt;C –&amp;gt; Ctrl&lt;/p&gt;
&lt;p&gt;S –&amp;gt; Shift&lt;/p&gt;
&lt;p&gt;M –&amp;gt; Alt&lt;/p&gt;
&lt;p&gt;Cmd –&amp;gt; Command&lt;/p&gt;
    
    </summary>
    
    
      <category term="介绍" scheme="https://idongliming.github.io/categories/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="工具" scheme="https://idongliming.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf</title>
    <link href="https://idongliming.github.io/post/thymeleaf.html"/>
    <id>https://idongliming.github.io/post/thymeleaf.html</id>
    <published>2019-07-24T05:26:13.000Z</published>
    <updated>2020-07-24T11:09:30.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎，类似JSP，Velocity，FreeMaker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。<br>Thymeleaf是spring boot推荐使用的模板引擎，最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用，但是总是看到说其效率有点低</p><a id="more"></a><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>在html页面中引入Thymeleaf命名空间，即<code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>此时在html模板文件中动态的属性使用<code>th:某某某</code>命名空间修饰</p><h1 id="变量表达式（替换变量的值）"><a href="#变量表达式（替换变量的值）" class="headerlink" title="变量表达式（替换变量的值）"></a>变量表达式（替换变量的值）</h1><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>你是否读过，<span class="token punctuation">'</span>+${book.name}+<span class="token punctuation">'</span>!!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    同EL表达式有些相似的效果，如果有数据，被替换    完成前后端分离效果(这些是前端代码)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="URL表达式（引入css-js）"><a href="#URL表达式（引入css-js）" class="headerlink" title="URL表达式（引入css/js）"></a>URL表达式（引入css/js）</h1><ul><li>用来引入js和css（CSS使用th:href，js使用使用th:src)）</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/xx.css}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/js/xx.js}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>spring boot默认配置Thymeleaf的静态资源路径为resource/static，上面的代码将引入resource/static/css/ss.css文件</p><h1 id="号表达式"><a href="#号表达式" class="headerlink" title="*号表达式"></a>*号表达式</h1><p>对$变量表达式的简化，直接看代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{firstName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Surname: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{lastName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pepper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Nationality: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{nationality}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Saturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--等价于--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.firstName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sebastian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Surname: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Pepper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Nationality: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.nationality}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Saturn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><p><code>#{}</code>简单看一下就可以，文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)，用Key索引Value，还可以提供一组参数(可选).</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name"><span class="token namespace">th:</span>test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{main.title}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{header.address.city}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{header.address.country}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="表达式支持的语法"><a href="#表达式支持的语法" class="headerlink" title="表达式支持的语法"></a>表达式支持的语法</h1><ul><li><p>字面值</p><ul><li>文本文字（Text literals）: ‘one text’, ‘Another one!’,…</li><li>数字文本（Number literals）: 0, 34, 3.0, 12.3,…</li><li>布尔文本（Boolean literals）: true, false</li><li>空（Null literal）: null</li><li>文字标记（Literal tokens）: one , sometext</li></ul></li><li><p>文本操作（Text operations）</p><ul><li>字符串连接（String concatenation）: +</li><li>文本替换（Literal substitutions）: |The name is ${name}|</li></ul></li><li><p>算术运算（Arithmetic operations）</p><ul><li>二元运算符（Binary operators）: + , - , * , / , %</li><li>减号（Minus sign (unary operator)）: -</li></ul></li><li><p>布尔操作（Boolean operations）</p><ul><li>Binary operators: and , or</li><li>Boolean negation (unary operator): ! , not</li></ul></li><li><p>比较和等价(Comparisons and equality)</p><ul><li>Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</li><li>Equality operators: == , != ( eq , ne )</li></ul></li><li><p>条件运算符（Conditional operators）三元运算符</p><ul><li>If-then: (if) ? (then)</li><li>If-then-else: (if) ? (then) : (else)</li><li>Default: (value) ?: (defaultvalue)</li></ul></li></ul><h1 id="常用标记"><a href="#常用标记" class="headerlink" title="常用标记"></a>常用标记</h1><ul><li>条件判断</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/comments(prodId<span class="token punctuation">=</span>${prod.id})}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#lists.isEmpty(prod.comments)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments.html<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/product/comments(prodId<span class="token punctuation">=</span>${prod.id})}<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #lists.isEmpty(prod.comments)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>循环遍历</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod,iterStat : ${prods}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${iterStat.odd}? <span class="token punctuation">'</span>odd<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.price}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.inStock}? #{true} : #{false}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>模板</p><ul><li><p>定义模板</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用模板</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>import</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎，类似JSP，Velocity，FreeMaker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。&lt;br&gt;Thymeleaf是spring boot推荐使用的模板引擎，最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用，但是总是看到说其效率有点低&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://idongliming.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="thymeleaf" scheme="https://idongliming.github.io/tags/thymeleaf/"/>
    
  </entry>
  
</feed>
